<?xml version="1.0" encoding="UTF-8"?>

<project name="{{ projectName }}-ci" default="build">
    {#
    <target name="pre-push" description="The dev tools to run before push"
       depends="prepare-dev,composer-run-install{% if enablePhpLint %},php-lint{% endif %}{% if enableJsHint %},jshint{% endif %},dev-tools-parallel{% if enablePhpUnit %},phpunit{% endif %}"/>
    #}
{% set buildDeps %}
{% if buildArtifacts.enabled %}prepare,{% endif %}{% if not travis.enabled %}composer-run-install,{% endif %}{% if enablePhpLint %}php-lint-ci,{% endif %}{% if enableJsHint %}jshint-ci,{% endif %}{% if enablePhpMessDetector %}phpmd-ci,{% endif %}{% if enablePhpCodeSniffer %}phpcs-ci,{% endif %}{% if enablePhpCopyPasteDetection %}phpcpd-ci,{% endif %}{% if enablePhpSecurityChecker %}php-security-checker,{% endif %}{% if enablePhpUnit %}phpunit-ci,{% endif %}{% if enableBehat %}behat-ci{% endif %}
{% endset %}
    <target name="build"
            depends="{{ buildDeps|trim(',') }}"/>

{% if buildArtifacts.enabled %}
    <target name="clean" description="Cleanup build artifacts">
        <delete dir="{{ buildArtifacts.path }}/coverage"/>
        <delete dir="{{ buildArtifacts.path }}/logs"/>
    </target>

    <target name="prepare" depends="clean" description="Prepare for build">
        <mkdir dir="{{ buildArtifacts.path }}/coverage"/>
        <mkdir dir="{{ buildArtifacts.path }}/logs"/>
    </target>

{% endif %}
{% if not travis.enabled %}
    <target name="check-composer">
        <available file="composer.phar" property="composer.installed"/>
    </target>

    <target name="composer-install" depends="check-composer" unless="composer.installed">
        <get src="http://getcomposer.org/composer.phar" dest="composer.phar"/>
    </target>

    <target name="composer-update" depends="composer-install">
        <exec executable="php" failonerror="true">
            <arg line="composer.phar self-update"/>
        </exec>
    </target>

    <target name="composer-run-install" depends="composer-update">
        <exec executable="php" failonerror="true">
            <arg line="composer.phar install --dev"/>
        </exec>
    </target>

{% endif %}
{% if enablePhpLint %}
    <target name="get-changeset.php.raw"
            description="creates a list of changed php files separated by newline">
        <pathconvert property="changeset.php.raw" pathsep="${line.separator}">
{% for path in phpSrcPath %}
            <fileset dir="{{ path }}">
                <include name="**/*.php"/>
                <modified/>
            </fileset>
{% endfor %}
        </pathconvert>

        <!--Check if files are modified-->
        <condition property="changeset.php.notempty">
            <not>
                <equals arg1="${changeset.php.raw}" arg2="" trim="true"/>
            </not>
        </condition>
    </target>

    <target name="get-changeset.php.spacesep" depends="get-changeset.php.raw" if="changeset.php.notempty"
            description="Creates a quoted list of changed php files separated by spaces">
        <loadresource property="changeset.php.spacesep">
            <propertyresource name="changeset.php.raw"/>
            <filterchain>
                <tokenfilter delimoutput=" ">
                    <linetokenizer/>
                    <replaceregex pattern="^" replace='"'/>
                    <replaceregex pattern="$" replace='"'/>
                </tokenfilter>
            </filterchain>
        </loadresource>
    </target>

    <target name="php-lint-ci" depends="get-changeset.php.spacesep" if="changeset.php.notempty"
            description="Perform syntax check of sourcecode files in parallel">
        <exec executable="sh" failonerror="true">
            <arg value="-c"/>
            <arg value="echo '${changeset.php.spacesep}' | xargs -n 1 -P 4 php -l 1>/dev/null"/>
        </exec>
        <echo message="OK"/>
    </target>

{% endif %}
{% if enableJsHint %}
    <target name="jshint-ci">
        <exec executable="node" failonerror="true" {% if buildArtifacts.enabled %}output="{{ buildArtifacts.path }}/logs/checkstyle-jshint.xml"{% endif %}>
            <arg value="{{ composerBinDir }}/jshint"/>
            <arg value="--config=.jshintrc"/>
            {% if buildArtifacts.enabled %}
            <arg value="--reporter=checkstyle"/>
            {% endif %}
            <arg value="{{ javaScriptSrcPath }}"/>
        </exec>
    </target>

{% endif %}
{% if enablePhpSecurityChecker %}
    <target name="php-security-checker" description="Check your composer dependencies for insecure components">
        <exec executable="{{ composerBinDir }}/security-checker" failonerror="false">
            <arg value="security:check"/>
            <arg value="--verbose"/>
            <arg value="composer.lock"/>
        </exec>
    </target>

{% endif %}
{% if enablePhpMessDetector %}
    <target name="phpmd-ci"
            description="Perform project mess detection using PHPMD creating a log file for the continuous integration server">
        <exec executable="{{ composerBinDir }}/phpmd" failonerror="true">
            <arg path="{{ phpSrcPath|join(',') }}"/>
            <arg value="xml"/>
            <arg value="phpmd.xml"/>
{% if phpMdExcludePatterns %}
            <arg value="--exclude"/>
            <arg value="{{ phpMdExcludePatterns|join(',') }}"/>
{% endif %}
{% if buildArtifacts.enabled %}
            <arg value="--reportfile"/>
            <arg value="{{ buildArtifacts.path }}/logs/pmd.xml"/>
{% endif %}
        </exec>
    </target>

{% endif %}
{% if enablePhpCodeSniffer %}
    <target name="phpcs-ci"
            description="Find coding standard violations using PHP_CodeSniffer creating a log file for the continuous integration server">
        <exec executable="{{ composerBinDir }}/phpcs" failonerror="true">
{% if buildArtifacts.enabled %}
            <arg value="--report-checkstyle={{ buildArtifacts.path }}/logs/checkstyle-php.xml"/>
{% endif %}
            <arg value="--report=full"/>
            <arg value="--standard=phpcs.xml"/>
            <!-- Don't show warnings-->
            <arg value="--warning-severity=0"/>
            <arg value="--extensions=php"/>
{% for path in phpSrcPath %}
            <arg path="{{ path }}"/>
{% endfor %}
        </exec>
    </target>

{% endif %}
{% if enablePhpCopyPasteDetection %}
    <target name="phpcpd-ci" description="Find duplicate code using PHPCPD">
        <exec executable="{{ composerBinDir }}/phpcpd" failonerror="false">
{% if buildArtifacts.enabled %}
            <arg value="--log-pmd"/>
            <arg value="{{ buildArtifacts.path }}/logs/pmd-cpd.xml"/>
{% endif %}
{% if phpCpdExcludePatterns %}
{% for phpCpdExcludePattern in phpCpdExcludePatterns %}
            <arg value="--exclude"/>
            <arg value="{{ phpCpdExcludePattern }}"/>
{% endfor %}
{% endif %}
{% for path in phpSrcPath %}
            <arg path="{{ path }}"/>
{% endfor %}
        </exec>
    </target>

{% endif %}
{% if enablePhpUnit %}
    <target name="phpunit-ci" description="Run unit tests with PHPUnit">
        <exec executable="{{ composerBinDir }}/phpunit" failonerror="true">
            <arg line="--configuration=${basedir}/{{ phpUnitConfigPath }}"/>
{% if buildArtifacts.enabled %}
            <arg line="--coverage-html={{ buildArtifacts.path }}/coverage"/>
            <arg line="--log-junit={{ buildArtifacts.path }}/logs/junit.xml"/>
            <arg line="--coverage-clover={{ buildArtifacts.path }}/logs/clover.xml"/>
{% endif %}
            <arg line="--coverage-text"/>
        </exec>
    </target>

{% endif %}
{% if enableBehat %}

    <target name="behat-ci">
        <exec executable="php" failonerror="true">
            <arg line="{{ composerBinDir }}/behat --config ./behat.yml --profile ci ${basedir}/features --tags=~skip" />
        </exec>
    </target>

{% endif %}
</project>
